  # JDBC 플러그인 설정 시작
  jdbc {
    # JDBC 드라이버 라이브러리의 경로를 지정합니다.
    jdbc_driver_library => "/home/ubuntu/mysql-connector-java-8.0.18/mysql-connector-java-8.0.18.jar"
    # JDBC 드라이버 클래스를 지정합니다.
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"  # com.mysql.jdbc.Driver 대신 com.mysql.cj.jdbc.Driver를 사용하는 것이 좋습니다.
    # MySQL 데이터베이스에 연결할 JDBC URL을 지정합니다.
    jdbc_connection_string => "jdbc:mysql://localhost:3306/fisa?useUnicode=true&serverTimezone=Asia/Seoul"
    # 데이터베이스 사용자명과 비밀번호를 설정합니다.
    jdbc_user => "root"
    jdbc_password => "root"
    # 실행할 SQL 쿼리를 지정합니다. 이전에 읽은 마지막 값보다 큰 passengerid를 가진 레코드를 선택합니다.
    statement => "SELECT * FROM titanic_age_lost ORDER BY age ASC "
    # 마지막 실행 시점을 기록하여 다음 실행 시 이를 참조합니다.
    record_last_run => true
    # 클린 실행을 지정합니다. 이 옵션이 true이면, 최초 실행 시 모든 데이터를 가져옵니다.
    clean_run => true
    # 추적할 컬럼의 타입을 지정합니다. numeric 타입으로 설정합니다.
    tracking_column_type => "numeric"
    # 추적할 컬럼을 지정합니다. 이 컬럼의 값을 기준으로 데이터를 추적합니다.
    tracking_column => "age"
    # 데이터의 컬럼 값을 사용할지 여부를 설정합니다.
    use_column_value => true

  }
}
filter {
}
output {
  # 콘솔 창에 필터링된 데이터를 출력하여 확인할 수 있도록 설정합니다.
  stdout {
    codec => rubydebug
  }
  # Elasticsearch에 데이터를 출력하여 인덱스 "titanic"로 저장합니다.
  elasticsearch {
    # Elasticsearch 서버의 호스트 주소를 설정합니다.
    hosts => ["http://localhost:9200"]
    # Elasticsearch에 저장될 인덱스의 이름을 설정합니다.
    index => "titanic_lost"
  }
}